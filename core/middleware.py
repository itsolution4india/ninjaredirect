from django.shortcuts import redirect
from django.utils.deprecation import MiddlewareMixin
from core.models import GoogleBotVisit ,NormalVisit
import ipaddress

# --- GOOGLEBOT IP RANGES (IPv4 + IPv6) ---
GOOGLEBOT_IP_RANGES = [
    # IPv4 ranges
    "34.22.85.0/27", "34.64.82.64/28", "34.65.242.112/28", "34.80.50.80/28",
    "34.88.194.0/28", "34.89.10.80/28", "34.89.198.80/28", "34.96.162.48/28",
    "34.100.182.96/28", "34.101.50.144/28", "34.118.66.0/28", "34.118.254.0/28",
    "34.126.178.96/28", "34.146.150.144/28", "34.147.110.144/28", "34.151.74.144/28",
    "34.152.50.64/28", "34.154.114.144/28", "34.155.98.32/28", "34.165.18.176/28",
    "34.175.160.64/28", "34.176.130.16/28", "35.247.243.240/28", "66.249.64.0/27",
    "66.249.64.32/27", "66.249.64.64/27", "66.249.64.96/27", "66.249.64.128/27",
    "66.249.64.160/27", "66.249.64.192/27", "66.249.64.224/27", "66.249.65.0/27",
    "66.249.65.32/27", "66.249.65.64/27", "66.249.65.96/27", "66.249.65.128/27",
    "66.249.65.160/27", "66.249.65.192/27", "66.249.65.224/27", "66.249.66.0/27",
    "66.249.66.32/27", "66.249.66.64/27", "66.249.66.96/27", "66.249.66.128/27",
    "66.249.66.160/27", "66.249.66.192/27", "66.249.66.224/27", "66.249.67.0/27",
    "66.249.67.32/27", "66.249.68.0/27", "66.249.68.32/27", "66.249.68.64/27",
    "66.249.68.96/27", "66.249.68.128/27", "66.249.68.160/27", "66.249.68.192/27",
    "66.249.69.0/27", "66.249.69.32/27", "66.249.69.64/27", "66.249.69.96/27",
    "66.249.69.128/27", "66.249.69.160/27", "66.249.69.192/27", "66.249.69.224/27",
    "66.249.70.0/27", "66.249.70.32/27", "66.249.70.64/27", "66.249.70.96/27",
    "66.249.70.128/27", "66.249.70.160/27", "66.249.70.192/27", "66.249.70.224/27",
    "66.249.71.0/27", "66.249.71.32/27", "66.249.71.64/27", "66.249.71.96/27",
    "66.249.71.128/27", "66.249.71.160/27", "66.249.71.192/27", "66.249.71.224/27",
    "66.249.72.0/27", "66.249.72.32/27", "66.249.72.64/27", "66.249.72.128/27",
    "66.249.72.160/27", "66.249.72.192/27", "66.249.72.224/27", "66.249.73.0/27",
    "66.249.73.32/27", "66.249.73.64/27", "66.249.73.96/27", "66.249.73.128/27",
    "66.249.73.160/27", "66.249.73.192/27", "66.249.73.224/27", "66.249.74.0/27",
    "66.249.74.32/27", "66.249.74.64/27", "66.249.74.96/27", "66.249.74.128/27",
    "66.249.74.160/27", "66.249.74.192/27", "66.249.74.224/27", "66.249.75.0/27",
    "66.249.75.32/27", "66.249.75.64/27", "66.249.75.96/27", "66.249.75.128/27",
    "66.249.75.160/27", "66.249.75.192/27", "66.249.75.224/27", "66.249.76.0/27",
    "66.249.76.32/27", "66.249.76.64/27", "66.249.76.96/27", "66.249.76.128/27",
    "66.249.76.160/27", "66.249.76.192/27", "66.249.76.224/27", "66.249.77.0/27",
    "66.249.77.32/27", "66.249.77.64/27", "66.249.77.96/27", "66.249.77.128/27",
    "66.249.77.160/27", "66.249.77.192/27", "66.249.77.224/27", "66.249.78.0/27",
    "66.249.78.32/27", "66.249.78.64/27", "66.249.78.96/27", "66.249.78.128/27",
    "66.249.78.160/27", "66.249.79.0/27", "66.249.79.32/27", "66.249.79.64/27",
    "66.249.79.128/27", "66.249.79.160/27", "66.249.79.192/27", "66.249.79.224/27",
    "192.178.4.0/27", "192.178.4.32/27", "192.178.4.64/27", "192.178.4.96/27",
    "192.178.4.128/27", "192.178.4.160/27", "192.178.4.192/27", "192.178.5.0/27",
    "192.178.6.0/27", "192.178.6.32/27", "192.178.6.64/27", "192.178.6.96/27",
    "192.178.6.128/27", "192.178.6.160/27", "192.178.6.192/27", "192.178.6.224/27",
    "192.178.7.0/27", "192.178.7.32/27", "192.178.7.64/27", "192.178.7.96/27",
    "192.178.7.128/27", "192.178.7.160/27", "192.178.7.192/27", "192.178.7.224/27",
    # IPv6 ranges
    "2001:4860:4801:1a::/64", "2001:4860:4801:1b::/64", "2001:4860:4801:1c::/64",
    "2001:4860:4801:1d::/64", "2001:4860:4801:1e::/64", "2001:4860:4801:1f::/64",
    "2001:4860:4801:2a::/64", "2001:4860:4801:2b::/64", "2001:4860:4801:2c::/64",
    "2001:4860:4801:2d::/64", "2001:4860:4801:2e::/64", "2001:4860:4801:2f::/64"
]

def is_ip_in_google_ranges(ip):
    """Check if an IP is within Googlebot ranges."""
    try:
        ip_obj = ipaddress.ip_address(ip)
        for cidr in GOOGLEBOT_IP_RANGES:
            if ip_obj in ipaddress.ip_network(cidr):
                return True
    except ValueError:
        pass
    return False


class GoogleBotRedirectMiddleware(MiddlewareMixin):
    """Detect bots/unknown browsers, log all visits, and redirect bots."""

    def process_request(self, request):
        user_agent = request.META.get("HTTP_USER_AGENT", "").lower()
        ip = (
            request.META.get("HTTP_X_FORWARDED_FOR", "").split(",")[0]
            or request.META.get("REMOTE_ADDR", "unknown")
        )
        path = request.path

        is_googlebot = "googlebot" in user_agent
        is_unknown = (
            not user_agent
            or user_agent.strip() == ""
            or user_agent == "unknown"
            or any(x in user_agent for x in ["bot", "crawler", "spider" , "HeadlessChrome" ,"headlesschrome"])
        )
        verified_google_ip = is_ip_in_google_ranges(ip)

        # --- CASE 1: Bot / Unknown user ---
        if path == "/" and (is_googlebot or is_unknown or verified_google_ip):
            GoogleBotVisit.objects.create(
                ip_address=ip,
                user_agent=request.META.get("HTTP_USER_AGENT", ""),
                path_accessed=path,
                verified_google_ip=verified_google_ip,
            )
            return redirect("/about/")

        # --- CASE 2: Normal human visitor ---
        else:
            NormalVisit.objects.create(
                ip_address=ip,
                user_agent=request.META.get("HTTP_USER_AGENT", ""),
                path_accessed=path,
            )

        # Continue to the requested page
        return None